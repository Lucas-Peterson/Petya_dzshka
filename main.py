import logging
from aiogram import Bot, Dispatcher, executor
from aiogram import types
from aiogram.types.message import ContentType
import markups as nav

bot = Bot(token="5297937415:AAHQwWuf2AePeLVbREsBPV07xGknYVdSyv8")
YOOTOKEN = "381764678:TEST:38452"

dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
       await bot.send_message(message.from_user.id,'–ü—Ä–∏–≤–µ—Çüëã, —ç—Ç–æ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –¥–æ–º–∞—à–µ–∫ —É–∂–µ –Ω–µ –ø–æ–º–Ω—é –∫–∞–∫–æ–π —à–∫–æ–ª—ã,–Ω–æ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç –≤–µ–ª–∏–∫–æ–≥–æ –ö–∞–∑–∞—Ä–∞ –ú–∞–∑–∞—Ä–æ–≤–∞. '
                                                   '–ë–æ—Ç –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ kazarchikpy –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup = nav.sub_inline_markup)

@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏üí∏':
       await bot.send_message(message.from_user.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup = nav.sub_inline_markup)

@dp.callback_query_handler(text="submonth")
async def submonth(call: types.CallbackQuery):
        await bot.send_invoice(chat_id= call.from_user.id,
                               title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Kazarchikpy",
                               description="–¢–µ—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ",
                               payload="month_sub",
                               provider_token=YOOTOKEN,
                               currency="RUB",
                               start_parameter="get_access",
                               prices=[{"label":"–†—É–±", "amount": 40000}])

@dp.pre_checkout_query_handler()
async def process_pre_checout_query(pre_checout_query: types.PreCheckoutQuery):
        await bot.answer_pre_checkout_query(pre_checout_query.id, ok=True)

@dp.message_handler(content_types= ContentType.SUCCESSFUL_PAYMENT)
async def procces_pay(message:types.Message):
    if message.successful_payment.invoice_payload == "month_sub":

        await bot.send_message(message.from_user.id, "–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)