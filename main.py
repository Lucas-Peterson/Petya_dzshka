import logging
import sqlite3
import time
import datetime
from aiogram import Bot, Dispatcher, executor
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message
import markups as nav

bot = Bot(token="5297937415:AAHQwWuf2AePeLVbREsBPV07xGknYVdSyv8")
YOOTOKEN = "381764678:TEST:38452"
ADMIN = 707305173

storage = MemoryStorage()

dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

conn = sqlite3.connect('db.db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
   user_id INTEGER,
   block INTEGER);
""")
conn.commit()

class dialog(StatesGroup):
    spam = State()
    blacklist = State()
    whitelist = State()
#------------------------------------------------------------Data_base----------------------------------------------------------------
def set_time_sub(self, user_id, time_sub):
    with self.connection:
        return self.cursor.execute("UPDATE 'users' SET 'time_sub' = ? WHERE 'user ID' = ?", (time_sub, user_id))

def get_time_sub(self, user_id):
    with self.connection:
        result = self.cursor.execute("SELECT 'time_sub' FROM 'users' WHERE 'user_id' = ?", (user_id,)).fetchall()
        for row in result:
            time_sub = int(row[0])
        return time_sub

    def get_time_status(self, user_id):
        with self.connection:
            result = self.cursor.execute("SELECT 'time_sub' FROM 'users' WHERE 'user_id' = ?", (user_id,)).fetchall()
            for row in result:
                time_sub = int(row[0])

            if time_sub > int(time.time()):
                return True
            else:
                return False

#---------------------------------------------------------------StartMeny--------------------------------------------------------------------------------------------
@dp.message_handler(commands=['start'])
async def admn(message: Message):
    cur = conn.cursor()
    cur.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
    result = cur.fetchone()
    if message.from_user.id == ADMIN:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω-–ü–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=keyboard)
    # ------------------------------------------------------Payment-----------------------------------------------------------
    else:
        if result is None:
            cur = conn.cursor()
            cur.execute(f'''SELECT * FROM users WHERE (user_id="{message.from_user.id}")''')
            entry = cur.fetchone()
            if entry is None:
                cur.execute(f'''INSERT INTO users VALUES ('{message.from_user.id}', '0')''')
            conn.commit()
            await bot.send_message(message.from_user.id,'–ü—Ä–∏–≤–µ—Çüëã, —ç—Ç–æ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –¥–æ–º–∞—à–µ–∫ —É–∂–µ –Ω–µ –ø–æ–º–Ω—é –∫–∞–∫–æ–π —à–∫–æ–ª—ã,–Ω–æ –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç –≤–µ–ª–∏–∫–æ–≥–æ –ö–∞–∑–∞—Ä–∞ –ú–∞–∑–∞—Ä–æ–≤–∞. '
                                                   '–ë–æ—Ç –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –Ω–æ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ kazarchikpy –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup = nav.sub_inline_markup)

@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏üí∏':
       await bot.send_message(message.from_user.id, '–æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å–∫–∏', reply_markup = nav.sub_inline_markup)

@dp.callback_query_handler(text="submonth")
async def submonth(call: types.CallbackQuery):
        await bot.send_invoice(chat_id= call.from_user.id,
                               title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Kazarchikpy",
                               description="–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –æ—Ç Kazarchik.py‚Ñ¢",
                               payload="month_sub",
                               provider_token=YOOTOKEN,
                               currency="RUB",
                               start_parameter="get_access",
                               prices=[{"label":"–†—É–±", "amount": 40000}])

@dp.pre_checkout_query_handler()
async def process_pre_checout_query(pre_checout_query: types.PreCheckoutQuery):
        await bot.answer_pre_checkout_query(pre_checout_query.id, ok=True)

@dp.message_handler(content_types= ContentType.SUCCESSFUL_PAYMENT)
async def procces_pay(message:types.Message):
    if message.successful_payment.invoice_payload == "month_sub":
        time_sub = int(time.time()) + days_to_seconds(30)
        db.db.set_time_sub(message.from_user_id, time_sub)
        await bot.send_message(message.from_user.id, "–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞")

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üìï"))
        keyboard.add(types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üë®üèº‚Äçüíª"))
        keyboard.add(types.InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–πü™∂"))
        keyboard.add(types.InlineKeyboardButton(text="–§–∏–∑–∏–∫–∞üìö"))
        keyboard.add(types.InlineKeyboardButton(text="–î–∞–ª—å—à–µ"))
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=keyboard)

        @dp.message_handler(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üìï")
        async def bot_message(message: types.Message):
            await bot.send_message(message.from_user.id, 'text')

        @dp.message_handler(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üë®üèº‚Äçüíª")
        async def bot_message(message: types.Message):
            await bot.send_message(message.from_user.id, 'text')

        @dp.message_handler(text="–†—É—Å—Å–∫–∏–πü™∂")
        async def bot_message(message: types.Message):
            await bot.send_message(message.from_user.id, 'text')

        @dp.message_handler(text="–§–∏–∑–∏–∫–∞üìö")
        async def bot_message(message: types.Message):
            await bot.send_message(message.from_user.id, 'text')

        @dp.message_handler(text="–î–∞–ª—å—à–µ")
        async def bot_message(message: types.Message):

            keyboard.add(types.InlineKeyboardButton(text="–ü—Ä–∞–≤–æüßë‚Äç‚öñÔ∏è"))
            keyboard.add(types.InlineKeyboardButton(text="–ë–∏–æ–ª–æ–≥–∏—èüçÄ"))
            keyboard.add(types.InlineKeyboardButton(text="–•–∏–º–∏—èüå±"))

        @dp.message_handler(text="–ü—Ä–∞–≤–æüßë‚Äç‚öñÔ∏è")
        async def bot_message(message: types.Message):
            await bot.send_message(message.from_user.id, 'text')

        @dp.message_handler(text="–ë–∏–æ–ª–æ–≥–∏—èüçÄ")
        async def bot_message(message: types.Message):
            await bot.send_message(message.from_user.id, 'text')

        @dp.message_handler(text="–•–∏–º–∏—èüå±")
        async def bot_message(message: types.Message):
            await bot.send_message(message.from_user.id, 'text')

        #----------------------------------------------Time_sub-----------------------------------------------------------------

        def days_to_seconds(days):
            return days * 24 * 60 * 60

        def time_sub_day(get_time):
            time_now = int(time.time())
            middle_time = int(get_time) - time_now
            if middle_time <= 0:
                return False
            else:
                dt = str(datetime.timedelta(seconds=middle_time))
                return dt
#---------------------------------------------------Admin-------------------------------------------------------------------------------

@dp.message_handler(content_types=['text'], text='–†–∞—Å—Å—ã–ª–∫–∞')
async def spam(message: Message):
    if message.from_user.id == ADMIN:
        await dialog.spam.set()
        await message.answer('–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    else:
        await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º')


@dp.message_handler(state=dialog.spam)
async def start_spam(message: Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
        await state.finish()
    else:
        cur = conn.cursor()
        cur.execute(f'''SELECT user_id FROM users''')
        spam_base = cur.fetchall()
        print(spam_base)
        for z in range(len(spam_base)):
            print(spam_base[z][0])
        for z in range(len(spam_base)):
            await bot.send_message(spam_base[z][0], message.text)
        await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
        await state.finish()


@dp.message_handler(state='*', text='–ù–∞–∑–∞–¥')
async def back(message: Message):
    if message.from_user.id == ADMIN:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
    else:
        await message.answer('–í–∞–º –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è')


@dp.message_handler(content_types=['text'], text='–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°')
async def hanadler(message: types.Message, state: FSMContext):
    if message.chat.id == ADMIN:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
        await message.answer(
            '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
            reply_markup=keyboard)
        await dialog.blacklist.set()


@dp.message_handler(state=dialog.blacklist)
async def proce(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
        await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=keyboard)
        await state.finish()
    else:
        if message.text.isdigit():
            cur = conn.cursor()
            cur.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
            result = cur.fetchall()
            # conn.commit()
            if len(result) == 0:
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
                keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
                keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
                await message.answer('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', reply_markup=keyboard)
                await state.finish()
            else:
                a = result[0]
                id = a[0]
                if id == 0:
                    cur.execute(f"UPDATE users SET block = 1 WHERE user_id = {message.text}")
                    conn.commit()
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
                    keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
                    keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°.', reply_markup=keyboard)
                    await state.finish()
                    await bot.send_message(message.text, '–¢—ã –ø–æ–ª—É—á–∏–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.')
                else:
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
                    keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
                    keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
                    await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–∞–Ω', reply_markup=keyboard)
                    await state.finish()
        else:
            await message.answer('–¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã...\n\n–í–≤–µ–¥–∏ ID')


@dp.message_handler(content_types=['text'], text='–£–±—Ä–∞—Ç—å –∏–∑ –ß–°')
async def hfandler(message: types.Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
    result = cur.fetchone()
    if result is None:
        if message.chat.id == ADMIN:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥"))
            await message.answer(
                '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                reply_markup=keyboard)
            await dialog.whitelist.set()

# if db.get_sub_status(message.from_user_id):
#    await bot.send_message(message.from_user.id, "–ü—Ä–µ–¥–º–µ—Ç—ã")
#  else await bot.send_message("–ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")

@dp.message_handler(state=dialog.whitelist)
async def proc(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
        keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
        await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=keyboard)
        await state.finish()
    else:
        if message.text.isdigit():
            cur = conn.cursor()
            cur.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
            result = cur.fetchall()
            conn.commit()
            if len(result) == 0:
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
                keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
                keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
                await message.answer('–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', reply_markup=keyboard)
                await state.finish()
            else:
                a = result[0]
                id = a[0]
                if id == 1:
                    cur = conn.cursor()
                    cur.execute(f"UPDATE users SET block = 0 WHERE user_id = {message.text}")
                    conn.commit()
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
                    keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
                    keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.', reply_markup=keyboard)
                    await state.finish()
                    await bot.send_message(message.text, '–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.')
                else:
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    keyboard.add(types.InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞"))
                    keyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°"))
                    keyboard.add(types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –ß–°"))
                    await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–ª –±–∞–Ω.', reply_markup=keyboard)
                    await state.finish()
        else:
            await message.answer('–¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã...\n\n–í–≤–µ–¥–∏ ID')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)